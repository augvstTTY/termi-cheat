{
  "Configuración Inicial": [
    {
      "cmd": "git config --global user.name \"Tu Nombre\"",
      "desc": "Configurar nombre de usuario globalmente"
    },
    {
      "cmd": "git config --global user.email \"tu@email.com\"",
      "desc": "Configurar email globalmente"
    },
    {
      "cmd": "git config --global core.editor \"code --wait\"",
      "desc": "Configurar editor por defecto (VS Code)"
    },
    {
      "cmd": "git config --global init.defaultBranch main",
      "desc": "Configurar rama principal por defecto"
    },
    {
      "cmd": "git config --list",
      "desc": "Listar todas las configuraciones"
    },
    {
      "cmd": "git config user.name",
      "desc": "Ver nombre de usuario configurado"
    }
  ],

  "Crear Repositorios": [
    {
      "cmd": "git init",
      "desc": "Inicializar nuevo repositorio local"
    },
    {
      "cmd": "git clone <url>",
      "desc": "Clonar repositorio existente"
    },
    {
      "cmd": "git clone <url> <directorio>",
      "desc": "Clonar en directorio específico"
    },
    {
      "cmd": "git clone --depth 1 <url>",
      "desc": "Clonar solo el historial reciente (shallow clone)"
    }
  ],

  "Cambios y Stage": [
    {
      "cmd": "git status",
      "desc": "Ver estado de archivos modificados"
    },
    {
      "cmd": "git add <archivo>",
      "desc": "Añadir archivo específico al stage"
    },
    {
      "cmd": "git add .",
      "desc": "Añadir todos los cambios al stage"
    },
    {
      "cmd": "git add -A",
      "desc": "Añadir todos los archivos (incluyendo eliminados)"
    },
    {
      "cmd": "git add -p",
      "desc": "Añadir cambios interactivamente (patch)"
    },
    {
      "cmd": "git reset <archivo>",
      "desc": "Quitar archivo del stage"
    },
    {
      "cmd": "git reset",
      "desc": "Quitar todos los archivos del stage"
    },
    {
      "cmd": "git rm <archivo>",
      "desc": "Eliminar archivo y añadir al stage"
    },
    {
      "cmd": "git mv <viejo> <nuevo>",
      "desc": "Renombrar/mover archivo y añadir al stage"
    }
  ],

  "Commits": [
    {
      "cmd": "git commit -m \"mensaje\"",
      "desc": "Hacer commit con mensaje"
    },
    {
      "cmd": "git commit -a -m \"mensaje\"",
      "desc": "Hacer commit de todos los archivos trackeados"
    },
    {
      "cmd": "git commit --amend",
      "desc": "Modificar el último commit"
    },
    {
      "cmd": "git commit --amend -m \"nuevo mensaje\"",
      "desc": "Cambiar mensaje del último commit"
    },
    {
      "cmd": "git commit --allow-empty -m \"mensaje\"",
      "desc": "Hacer commit vacío"
    }
  ],

  "Ramas (Branches)": [
    {
      "cmd": "git branch",
      "desc": "Listar ramas locales"
    },
    {
      "cmd": "git branch -a",
      "desc": "Listar todas las ramas (locales y remotas)"
    },
    {
      "cmd": "git branch <nombre-rama>",
      "desc": "Crear nueva rama"
    },
    {
      "cmd": "git branch -d <rama>",
      "desc": "Eliminar rama local"
    },
    {
      "cmd": "git branch -D <rama>",
      "desc": "Forzar eliminación de rama"
    },
    {
      "cmd": "git checkout <rama>",
      "desc": "Cambiar a rama existente"
    },
    {
      "cmd": "git checkout -b <nueva-rama>",
      "desc": "Crear y cambiar a nueva rama"
    },
    {
      "cmd": "git switch <rama>",
      "desc": "Cambiar a rama (Git 2.23+)"
    },
    {
      "cmd": "git switch -c <nueva-rama>",
      "desc": "Crear y cambiar a nueva rama (Git 2.23+)"
    },
    {
      "cmd": "git merge <rama>",
      "desc": "Fusionar rama con rama actual"
    },
    {
      "cmd": "git merge --no-ff <rama>",
      "desc": "Fusionar siempre creando commit de merge"
    },
    {
      "cmd": "git rebase <rama>",
      "desc": "Reaplicar commits sobre otra rama"
    },
    {
      "cmd": "git rebase -i HEAD~3",
      "desc": "Rebase interactivo de últimos 3 commits"
    }
  ],

  "Remotos": [
    {
      "cmd": "git remote -v",
      "desc": "Listar repositorios remotos"
    },
    {
      "cmd": "git remote add origin <url>",
      "desc": "Añadir repositorio remoto"
    },
    {
      "cmd": "git remote remove origin",
      "desc": "Eliminar repositorio remoto"
    },
    {
      "cmd": "git remote rename <viejo> <nuevo>",
      "desc": "Renombrar repositorio remoto"
    },
    {
      "cmd": "git remote show origin",
      "desc": "Mostrar información del remoto"
    },
    {
      "cmd": "git fetch",
      "desc": "Descargar cambios del remoto sin fusionar"
    },
    {
      "cmd": "git fetch origin",
      "desc": "Descargar cambios de origin"
    },
    {
      "cmd": "git fetch --prune",
      "desc": "Eliminar referencias a ramas remotas eliminadas"
    },
    {
      "cmd": "git pull",
      "desc": "Descargar cambios y fusionar con rama actual"
    },
    {
      "cmd": "git pull origin main",
      "desc": "Descargar cambios de rama específica"
    },
    {
      "cmd": "git pull --rebase",
      "desc": "Pull con rebase en lugar de merge"
    },
    {
      "cmd": "git push",
      "desc": "Subir cambios al remoto"
    },
    {
      "cmd": "git push origin <rama>",
      "desc": "Subir rama específica al remoto"
    },
    {
      "cmd": "git push -u origin <rama>",
      "desc": "Subir y establecer upstream tracking"
    },
    {
      "cmd": "git push --force",
      "desc": "Forzar push (sobreescribir historial)"
    },
    {
      "cmd": "git push --force-with-lease",
      "desc": "Forzar push de manera más segura"
    },
    {
      "cmd": "git push --all",
      "desc": "Subir todas las ramas locales"
    },
    {
      "cmd": "git push --tags",
      "desc": "Subir todas las tags"
    }
  ],

  "Historial y Logs": [
    {
      "cmd": "git log",
      "desc": "Mostrar historial de commits"
    },
    {
      "cmd": "git log --oneline",
      "desc": "Historial compacto (una línea por commit)"
    },
    {
      "cmd": "git log --graph --oneline --all",
      "desc": "Historial visual con gráfico"
    },
    {
      "cmd": "git log -p",
      "desc": "Historial con diferencias (patch)"
    },
    {
      "cmd": "git log --stat",
      "desc": "Historial con estadísticas de cambios"
    },
    {
      "cmd": "git log --since=\"1 week ago\"",
      "desc": "Historial desde fecha específica"
    },
    {
      "cmd": "git log --author=\"nombre\"",
      "desc": "Historial por autor"
    },
    {
      "cmd": "git log --grep=\"palabra\"",
      "desc": "Buscar en mensajes de commit"
    },
    {
      "cmd": "git log -S \"función\"",
      "desc": "Buscar cambios que añadan/eliminen texto"
    },
    {
      "cmd": "git blame <archivo>",
      "desc": "Ver quién modificó cada línea"
    },
    {
      "cmd": "git show <commit>",
      "desc": "Mostrar información de commit específico"
    },
    {
      "cmd": "git diff",
      "desc": "Mostrar cambios no staged"
    },
    {
      "cmd": "git diff --staged",
      "desc": "Mostrar cambios staged"
    },
    {
      "cmd": "git diff HEAD",
      "desc": "Mostrar todos los cambios desde último commit"
    },
    {
      "cmd": "git diff <commit1> <commit2>",
      "desc": "Comparar dos commits"
    },
    {
      "cmd": "git diff <rama1>..<rama2>",
      "desc": "Comparar dos ramas"
    }
  ],

  "Tags": [
    {
      "cmd": "git tag",
      "desc": "Listar tags"
    },
    {
      "cmd": "git tag v1.0.0",
      "desc": "Crear tag ligero"
    },
    {
      "cmd": "git tag -a v1.0.0 -m \"Versión 1.0.0\"",
      "desc": "Crear tag anotado con mensaje"
    },
    {
      "cmd": "git tag -d v1.0.0",
      "desc": "Eliminar tag local"
    },
    {
      "cmd": "git push origin v1.0.0",
      "desc": "Subir tag específico al remoto"
    },
    {
      "cmd": "git push origin --tags",
      "desc": "Subir todos los tags al remoto"
    },
    {
      "cmd": "git checkout v1.0.0",
      "desc": "Cambiar a tag específico"
    }
  ],

  "Stashing": [
    {
      "cmd": "git stash",
      "desc": "Guardar cambios temporalmente"
    },
    {
      "cmd": "git stash save \"mensaje\"",
      "desc": "Stash con mensaje descriptivo"
    },
    {
      "cmd": "git stash list",
      "desc": "Listar todos los stashes"
    },
    {
      "cmd": "git stash apply",
      "desc": "Aplicar último stash"
    },
    {
      "cmd": "git stash apply stash@{1}",
      "desc": "Aplicar stash específico"
    },
    {
      "cmd": "git stash pop",
      "desc": "Aplicar y eliminar último stash"
    },
    {
      "cmd": "git stash drop",
      "desc": "Eliminar último stash"
    },
    {
      "cmd": "git stash clear",
      "desc": "Eliminar todos los stashes"
    },
    {
      "cmd": "git stash branch <rama>",
      "desc": "Crear rama desde stash"
    }
  ],

  "Reset y Revert": [
    {
      "cmd": "git reset --soft HEAD~1",
      "desc": "Deshacer último commit pero mantener cambios en stage"
    },
    {
      "cmd": "git reset --mixed HEAD~1",
      "desc": "Deshacer último commit y quitar cambios del stage"
    },
    {
      "cmd": "git reset --hard HEAD~1",
      "desc": "Deshacer último commit y descartar cambios"
    },
    {
      "cmd": "git reset --hard <commit>",
      "desc": "Resetear a commit específico (peligroso)"
    },
    {
      "cmd": "git revert <commit>",
      "desc": "Crear commit que deshace cambios específicos"
    },
    {
      "cmd": "git revert HEAD",
      "desc": "Revertir el último commit"
    },
    {
      "cmd": "git clean -n",
      "desc": "Mostrar archivos no trackeados que serán eliminados"
    },
    {
      "cmd": "git clean -f",
      "desc": "Eliminar archivos no trackeados"
    },
    {
      "cmd": "git clean -fd",
      "desc": "Eliminar archivos y directorios no trackeados"
    }
  ],

  "Búsqueda y Debugging": [
    {
      "cmd": "git bisect start",
      "desc": "Iniciar búsqueda binaria para encontrar bug"
    },
    {
      "cmd": "git bisect bad",
      "desc": "Marcar commit actual como malo"
    },
    {
      "cmd": "git bisect good <commit>",
      "desc": "Marcar commit específico como bueno"
    },
    {
      "cmd": "git bisect reset",
      "desc": "Terminar sesión de bisect"
    },
    {
      "cmd": "git grep \"texto\"",
      "desc": "Buscar texto en código"
    },
    {
      "cmd": "git grep -n \"texto\"",
      "desc": "Buscar texto mostrando números de línea"
    },
    {
      "cmd": "git grep --count \"texto\"",
      "desc": "Contar ocurrencias de texto"
    }
  ],

  "Submódulos": [
    {
      "cmd": "git submodule add <url> <ruta>",
      "desc": "Añadir submódulo"
    },
    {
      "cmd": "git submodule init",
      "desc": "Inicializar submódulos"
    },
    {
      "cmd": "git submodule update",
      "desc": "Actualizar submódulos"
    },
    {
      "cmd": "git submodule update --init --recursive",
      "desc": "Inicializar y actualizar recursivamente"
    },
    {
      "cmd": "git submodule status",
      "desc": "Ver estado de submódulos"
    },
    {
      "cmd": "git submodule foreach git pull",
      "desc": "Ejecutar comando en todos los submódulos"
    }
  ],

  "Trucos y Alias": [
    {
      "cmd": "git config --global alias.co checkout",
      "desc": "Crear alias 'co' para checkout"
    },
    {
      "cmd": "git config --global alias.br branch",
      "desc": "Crear alias 'br' para branch"
    },
    {
      "cmd": "git config --global alias.ci commit",
      "desc": "Crear alias 'ci' para commit"
    },
    {
      "cmd": "git config --global alias.st status",
      "desc": "Crear alias 'st' para status"
    },
    {
      "cmd": "git config --global alias.unstage 'reset HEAD --'",
      "desc": "Alias para quitar del stage"
    },
    {
      "cmd": "git config --global alias.last 'log -1 HEAD'",
      "desc": "Ver último commit"
    },
    {
      "cmd": "git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"",
      "desc": "Alias para log bonito"
    }
  ],

  "Workflow Avanzado": [
    {
      "cmd": "git cherry-pick <commit>",
      "desc": "Aplicar commit específico a rama actual"
    },
    {
      "cmd": "git worktree add ../nueva-rama nueva-rama",
      "desc": "Añadir nuevo worktree para rama"
    },
    {
      "cmd": "git worktree list",
      "desc": "Listar worktrees"
    },
    {
      "cmd": "git rerere",
      "desc": "Reuse Recorded Resolution (resolución automática de conflictos)"
    },
    {
      "cmd": "git filter-branch --tree-filter 'comando'",
      "desc": "Reescribir historial (avanzado)"
    },
    {
      "cmd": "git replace <commit-viejo> <commit-nuevo>",
      "desc": "Reemplazar commits sin modificar historial"
    }
  ],

  "Herramientas de Diagnóstico": [
    {
      "cmd": "git fsck",
      "desc": "Verificar integridad de base de datos"
    },
    {
      "cmd": "git gc",
      "desc": "Limpieza y optimización de repositorio"
    },
    {
      "cmd": "git reflog",
      "desc": "Mostrar historial de referencias (recuperación de commits perdidos)"
    },
    {
      "cmd": "git count-objects -v",
      "desc": "Contar objetos y ver tamaño de repositorio"
    },
    {
      "cmd": "git verify-commit <commit>",
      "desc": "Verificar firma GPG de commit"
    },
    {
      "cmd": "git verify-tag <tag>",
      "desc": "Verificar firma GPG de tag"
    }
  ]
}
